:lib: pass:quotes[_library_]
:libs: pass:quotes[_libraries_]
:j: Java
:fs: functies
:f: functie
:m: method
:icons: font
:source-highlighter: rouge

//ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
//endif::[]

= Constructors
//Author Mark Nuyts
//v0.1
:toc: left
:toclevels: 4

Constructors zijn speciale _methods_ die opgeroepen worden bij het initialiseren van een Klasse.
Bij het aanmaken van een instantie wordt telkens een bepaalde constructor opgeroepen. Standaard is dit een lege constructor zonder parameters (de _default constructor_).

== De default constructor

Indien we een instantie aanmaken van een klasse:
[source,java]
----
GameUnit paladin = new GameUnit();<1>
----
<1> Via het _new_ keyword maken we een instantie aan.

Dan wordt in de GameUnit klasse de default constructor opgeroepen:

[source,java]
----
public class GameUnit {
  int hitpoints = 100;
  int schield = 50;
  int speed = 5;
  
  public GameUnit(){ <1>
  <2>
  }

  public void attack(Unit unit){ <3>
    unit.hitpoints += 10;
  }
}
----
<1> De default constructor van GameUnit. Merk op dat deze #dezelfde naam heeft als de klassenaam#. De constructor heeft #geen return type#.
<2> De constructor is standaard (default) leeg.  
<3> Een method in de klasse. Let op dat deze wel een return type heeft (_void_).

Normaal gezien is deze default constructor niet expliciet aanwezig, maar de compiler voegt hem automatisch toe.

De volgende code is in feite dus identiek aan degene hierboven:


[source,java]
----
public class GameUnit {
  int hitpoints = 100;
  int schield = 50;
  int speed = 5;
  
 <1>

  public void attack(Unit unit){
    unit.hitpoints += 10;
  }
}
----
<1> Er is geen andere constructor aanwezig, de compiler voegt deze autmatisch toe, maar enkel #indien er geen andere constructor (met parameters) werd toegevoegd#.

=== De default constructor gebruiken

In de default constructor kunnen we _code_ plaatsen die automatisch wordt uitgevoerd indien er een instantie van de klasse wordt aangemaakt:

[source,java]
----
public class GameUnit {
  int hitpoints = 100;
  int schield = 50;
  int speed = 5;
  
  public GameUnit(){ <1>
      System.out.println("GameUnit created"); <2>
  }

  public void attack(Unit unit){
    unit.hitpoints += 10;
  }
}
----
<1> De default constructor.
<2> Code die wordt uitgevoerd indien we een instantie aanmaken van e GameUnit klasse.
 
We maken nu een aantal instanties aan:
[source,java]
----
GameUnit paladin = new GameUnit();
GameUnit paladin2 = new GameUnit();
----

Dit heeft het volgende resultaat in de console:

----
GameUnit created
GameUnit created
----

== __Parameterized constructors__

Naast de default constructor kunnen we ook constructors toevoegen die parameters aanvaarden, dit laat ons bijvoorbeeld toe om de hitpoints van de paladin onmiddelijk mee te geven:


[source,java]
----
public class GameUnit {
  int hitpoints = 100;
  int schield = 50;
  int speed = 5;
  
  public GameUnit(int hitpoints){ <1>
      this.hitpoints = hitpoints; <2>
  }

  public void attack(Unit unit){
    unit.hitpoints += 10;
  }
}
----
<1> Een constructor met een int parameter. Dit is *niet* meer de default constructor
<2> Via het _this_ keyword verwijzen we naar de hitpoints bovenaan de klasse, met hitpoints zonder _this_, naar de parameter.

Indien we nu een instantie zouden maken van een GameUnit, moeten we *verplicht* een integer meegeven (de default constructor is immers niet meer impliciet aanwezig):

[source,java]
----
GameUnit paladin = new GameUnit(250);<1>
System.out.println(paladin.hitpoints);
----
<1> We geven de nieuwe paladin onmiddelijk 250 hitpoints.
<2> Dit zal 250 uitprinten naar de console.

Op deze manier zouden we ook de naam kunnen toevoegen aan een constructor:

[source,java]
----
public class GameUnit {
  int hitpoints = 100;
  int schield = 50;
  int speed = 5;
  String name = "";
  
  public GameUnit(String name){ <1>
      this.name = name; <2>
  }
  
  public GameUnit(int hitpoints){ <3>
      this.hitpoints = hitpoints;
  }

  public void attack(Unit unit){
    unit.hitpoints += 10;
  }
}
----
<1> Een constructor met een String parameter. Dit is *niet* de default constructor
<2> Via het _this_ keyword verwijzen we naar de name bovenaan de klasse, met name zonder _this_, naar de parameter.
<3> Merk op dat de andere constructor (met de hitpoints) ook aanwezig is.

We kunnen nu op 2 manier een instantie maken:

[source,java]
----
GameUnit paladin = new GameUnit(300); <1>
GameUnit paladin2 = new GameUnit("Garibaldi"); <2>
----
<1> Deze paladin krijgt 300 hitpoints.
<2> Deze paladin krijgt een naam.

=== Constructors oproepen vanuit andere constructors

Stel dat we nu een paladin willen aanmaken met zowel hitpoints als een naam:

[source,java]
----
public class GameUnit {
  int hitpoints = 100;
  int schield = 50;
  int speed = 5;
  String name = "";
  
  public GameUnit(int hitpoints, String name){ <1>
    this(hitpoints); <2>
    this.name = name; <3>
  }
  
  public GameUnit(String name){ <4>
      this.name = name;
  }
  
  public GameUnit(int hitpoints){ <5>
      this.hitpoints = hitpoints;
  }

  public void attack(Unit unit){
    unit.hitpoints += 10;
  }
}
----
<1> Een constructor met zowel een int als een String parameter. Dit is *niet* de default constructor
<2> Via het _this_ keyword verwijzen we naar de constructor in <5> (want er wordt een int datatype meegegeven). Dit vermijdt wat herhaling van code (toewijzen van variabelen).
<3> We kunnen de constructor in <4> niet meer aanroepen, want de instantie is al gemaakt door de <4> op te roepen.
<4> De andere constructors blijven aanwezig.
<5> De andere constructors blijven aanwezig.

Nu kunnen we onmiddelijk een instantie aanmaken met een naam en hitpoints:

[source,java]
----
GameUnit paladin = new GameUnit(300, "Garibaldi");
----


